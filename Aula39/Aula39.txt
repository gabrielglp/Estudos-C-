Classes abstract (tamb√©m as interfaces) s√£o como uma simplifica√ß√£o de c√≥digo, ou seja, ajuda na organiza√ß√£o, manuten√ß√£o e por exemplo
 na repeti√ß√£o de c√≥digo no caso do abstract (porque a interface obriga a implementa√ß√£o). Um outro exemplo, voc√™ tem duas classes que 
 tem c√≥digos iguais e decide fazer uma heran√ßa:

namespace Test 
{
    class A 
    {
        public void MetOne() 
        {
            System.Console.WriteLine("Classe A feita!");
            // Faz oque se pede...
        }

        public void MetTwo() 
        {
            System.Console.WriteLine("Classe A feita!");
            // Faz oque se pede...
        }
    }

    class B : A { }
}

O c√≥digo acima foi feito de forma errada, pois, qualquer altera√ß√£o na classe A afetar√° a classe B, ent√£o para evitar erros futuros fazemos o seguinte:

namespace Test 
{
    abstract class AB 
    {
        public void MetOne() 
        {
            System.Console.WriteLine("Classe A feita!");
            // Faz oque se pede...
        }

        public void MetTwo() 
        {
            System.Console.WriteLine("Classe A feita!");
            // Faz oque se pede...
        }
    }

    class A : AB { }

    class B : AB { }
}

Agora qualquer altera√ß√£o ou manuten√ß√£o na classe A ser√° apenas da classe A.

Espero que minha explica√ß√£o tenha sido boa cara, abra√ßos üëçüëçüëç